angular.module("app",["ngRoute","ui.router"]),angular.module("app").service("auth",["$http","$window","$location","$rootScope",function(e,t,o,r){function n(){return e.get("api/users")}function a(t,o){return e.post("api/sessions",{username:t,password:o})}function l(t,o,r){return e.post("api/users",{name:t,username:o,password:r})}function s(){localStorage.removeItem("user_token"),localStorage.removeItem("logged_user"),delete e.defaults.headers.common["x-auth"],r.isLogged=!1,r.currentUser=null,o.path("/login")}function u(o,r){t.sessionStorage.user_token=o,localStorage.setItem("user_token",o),e.defaults.headers.common["x-auth"]=t.sessionStorage.user_token,r&&"function"==typeof r&&r()}function c(){}function g(e,t){r.currentUser=e.name,localStorage.setItem("logged_user",r.currentUser),r.isLogged=!0,t&&"function"==typeof t&&t()}function i(){r.intendedRoute?o.path(r.intendedRoute):o.path("/home")}return{getUser:n,login:a,register:l,logout:s,storeToken:u,isLogged:c,postLoginOps:g,postLoginRouteHandler:i}}]),angular.module("app").controller("homeCtrl",["$scope","$http",function(e,t){t.get("https://randomapi.com/api/5c416965db8365e8e6e353162fdd7b38?key=QDA1-245Z-598E-LOPI&results=10").then(function(t){e.data=t.data.results})}]),angular.module("app").controller("masterCtrl",["$scope","$rootScope","$route","$http",function(e,t,o,r){console.log("masterCtrl"),localStorage.getItem("logged_user")&&(t.currentUser=localStorage.getItem("logged_user"),r.defaults.headers.common["x-auth"]=localStorage.getItem("user_token"),console.log(localStorage.getItem("user_token"))),e.$on("login",function(o,r){console.log("Logged In"),e.currentUser=r,t.currentUser=r,localStorage.setItem("logged_user",t.currentUser.username)})}]),angular.module("app").controller("navCtrl",["$scope","auth","$location",function(e,t,o){e.logout=function(){t.logout()}}]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,o){t.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html",controller:"navCtrl"},content:{templateUrl:"users/home.html",controller:"homeCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"homeCtrl"}}}).state("app.home.data",{url:"/data/new",views:{"content@":{templateUrl:"users/newData.html",controller:"newDataCtrl"}}}),o.html5Mode(!0)}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
